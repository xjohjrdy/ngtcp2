name: build

on: [push, pull_request]

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-22.04]
        compiler: [clang]
        buildtool: [autotools]
        openssl: [openssl3]
        sockaddr: [native-sockaddr]
        exclude:
        - os: macos-11
          buildtool: distcheck
        - compiler: gcc
          buildtool: distcheck
        - openssl: openssl3
          buildtool: distcheck
        - compiler: gcc
          sockaddr: generic-sockaddr
        - openssl: openssl3
          sockaddr: generic-sockaddr
        - buildtool: distcheck
          sockaddr: generic-sockaddr
        - buildtool: cmake
          sockaddr: generic-sockaddr
        - os: macos-11
          compiler: gcc
        - os: macos-11
          openssl: openssl3

    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v3
    - name: Startup
      run: |
        echo 'NGTCP2_SOURCE_DIR='"$PWD" >> $GITHUB_ENV
    - name: Linux setup
      if: runner.os == 'Linux'
      run: |
        sudo apt-get install \
          g++-11 \
          clang-12 \
          autoconf \
          automake \
          autotools-dev \
          libtool \
          pkg-config \
          libcunit1-dev \
          libssl-dev \
          libev-dev \
          libgnutls28-dev \
          cmake \
          cmake-data

        echo 'NPROC='"$(nproc)" >> $GITHUB_ENV
    - name: MacOS setup
      if: runner.os == 'macOS'
      run: |
        brew install libev gnutls cunit autoconf automake pkg-config libtool

        echo 'NPROC='"$(sysctl -n hw.ncpu)" >> $GITHUB_ENV
    - name: Setup clang (Linux)
      if: runner.os == 'Linux' && matrix.compiler == 'clang'
      run: |
        echo 'CC=clang-12' >> $GITHUB_ENV
        echo 'CXX=clang++-12' >> $GITHUB_ENV
    - name: Setup clang (MacOS)
      if: runner.os == 'macOS' && matrix.compiler == 'clang'
      run: |
        echo 'CC=clang' >> $GITHUB_ENV
        echo 'CXX=clang++' >> $GITHUB_ENV
    - name: Setup gcc
      if: runner.os == 'Linux' && matrix.compiler == 'gcc'
      run: |
        echo 'CC=gcc-11' >> $GITHUB_ENV
        echo 'CXX=g++-11' >> $GITHUB_ENV
    - name: Build OpenSSL v1.1.1
      if: matrix.openssl == 'openssl1'
      run: |
        ./ci/build_openssl1.sh
    - name: Build OpenSSL v3.0.x
      if: matrix.openssl == 'openssl3'
      run: |
        ./ci/build_openssl3.sh
    - name: Build BoringSSL
      run: |
        ./ci/build_boringssl.sh
    - name: Build Picotls
      if: matrix.openssl == 'openssl1'
      run: |
        ./ci/build_picotls.sh
    - name: Build wolfSSL
      run: |
        ./ci/build_wolfssl.sh
    - name: Build nghttp3
      run: |
        ./ci/build_nghttp3.sh
    - name: Setup environment variables
      run: |
        PKG_CONFIG_PATH="$PWD/openssl/build/lib/pkgconfig:$PWD/openssl/build/lib64/pkgconfig:$PWD/wolfssl/build/lib/pkgconfig:$PWD/nghttp3/build/lib/pkgconfig"
        LDFLAGS="$EXTRA_LDFLAGS -Wl,-rpath,$PWD/openssl/build/lib -Wl,-rpath,$PWD/openssl/build/lib64"
        BORINGSSL_CFLAGS="-I$PWD/boringssl/include/"
        BORINGSSL_LIBS="-L$PWD/boringssl/build/ssl -lssl -L$PWD/boringssl/build/crypto -lcrypto"
        PICOTLS_CFLAGS="-I$PWD/picotls/include/"
        PICOTLS_LIBS="-L$PWD/picotls/build -lpicotls-openssl -lpicotls-core"

        echo 'PKG_CONFIG_PATH='"$PKG_CONFIG_PATH" >> $GITHUB_ENV
        echo 'LDFLAGS='"$LDFLAGS" >> $GITHUB_ENV
        echo 'BORINGSSL_CFLAGS='"$BORINGSSL_CFLAGS" >> $GITHUB_ENV
        echo 'BORINGSSL_LIBS='"$BORINGSSL_LIBS" >> $GITHUB_ENV
        echo 'PICOTLS_CFLAGS='"$PICOTLS_CFLAGS" >> $GITHUB_ENV
        echo 'PICOTLS_LIBS='"$PICOTLS_LIBS" >> $GITHUB_ENV
    - name: Enable ASAN
      if: runner.os == 'Linux'
      run: |
        asanflags="-fsanitize=address,undefined -fno-sanitize-recover=undefined"

        LDFLAGS="$LDFLAGS $asanflags"
        CFLAGS="$CFLAGS $asanflags -g3"
        CXXFLAGS="$CXXFLAGS $asanflags -g3"

        echo 'LDFLAGS='"$LDFLAGS" >> $GITHUB_ENV
        echo 'CFLAGS='"$CFLAGS" >> $GITHUB_ENV
        echo 'CXXFLAGS='"$CXXFLAGS" >> $GITHUB_ENV
    - name: BoringSSL pthread requirement
      if: runner.os == 'Linux'
      run: |
        BORINGSSL_LIBS="$BORINGSSL_LIBS -pthread"

        echo 'BORINGSSL_LIBS='"$BORINGSSL_LIBS" >> $GITHUB_ENV
    - name: Enable generic sockaddr
      if: matrix.sockaddr == 'generic-sockaddr'
      run: |
        CFLAGS="$CFLAGS -DNGTCP2_USE_GENERIC_SOCKADDR"
        EXTRA_AUTOTOOLS_OPTS="$EXTRA_AUTOTOOLS_OPTS --enable-lib-only"

        echo 'CFLAGS='"$CFLAGS" >> $GITHUB_ENV
        echo 'EXTRA_AUTOTOOLS_OPTS='"$EXTRA_AUTOTOOLS_OPTS" >> $GITHUB_ENV
    - name: Enable Picotls when OpenSSL is v1
      if: matrix.openssl == 'openssl1'
      run: |
        EXTRA_AUTOTOOLS_OPTS="$EXTRA_AUTOTOOLS_OPTS --with-picotls"
        CMAKE_OPTS="$CMAKE_OPTS -DENABLE_PICOTLS=ON"

        echo 'HAVE_PICOTLS=1' >> $GITHUB_ENV
        echo 'EXTRA_AUTOTOOLS_OPTS='"$EXTRA_AUTOTOOLS_OPTS" >> $GITHUB_ENV
        echo 'CMAKE_OPTS='"$CMAKE_OPTS" >> $GITHUB_ENV
    - name: Configure autotools
      if: matrix.buildtool == 'autotools'
      run: |
        autoreconf -i && \
        ./configure --enable-werror \
          --with-openssl --with-gnutls --with-boringssl --with-wolfssl \
          $EXTRA_AUTOTOOLS_OPTS
    - name: Configure autotools for distcheck
      if: matrix.buildtool == 'distcheck'
      run: |
        autoreconf -i && ./configure
    - name: Configure cmake
      if: matrix.buildtool == 'cmake'
      run: |
        autoreconf -i && ./configure
        make dist

        VERSION=$(grep PACKAGE_VERSION config.h | cut -d' ' -f3 | tr -d '"')
        tar xf ngtcp2-$VERSION.tar.gz
        cd ngtcp2-$VERSION
        mkdir build
        cd build

        echo 'NGTCP2_BUILD_DIR='"$PWD" >> $GITHUB_ENV

        cmake $CMAKE_OPTS \
          -DENABLE_GNUTLS=ON \
          -DENABLE_BORINGSSL=ON \
          -DBORINGSSL_LIBRARIES="$BORINGSSL_LIBS" \
          -DBORINGSSL_INCLUDE_DIR="$NGTCP2_SOURCE_DIR/boringssl/include/" \
          -DPICOTLS_LIBRARIES="$PICOTLS_LIBS" \
          -DPICOTLS_INCLUDE_DIR="$NGTCP2_SOURCE_DIR/picotls/include/" \
          -DENABLE_WOLFSSL=ON ..
    - name: Build ngtcp2
      if: matrix.buildtool != 'distcheck'
      run: |
        [ -n "$NGTCP2_BUILD_DIR" ] && cd "$NGTCP2_BUILD_DIR"
        make -j"$NPROC"
        make -j"$NPROC" check
    - name: Build ngtcp2 with distcheck
      if: matrix.buildtool == 'distcheck'
      run: |
        make -j"$NPROC" distcheck \
          DISTCHECK_CONFIGURE_FLAGS="--enable-werror --with-openssl --with-gnutls --with-boringssl $EXTRA_AUTOTOOLS_OPTS"
    - name: upload
      uses: actions/upload-artifact@v3.1.0
      with:
        path: /home/runner/work/ngtcp2/ngtcp2/examples
    - name: Integration test
      if: matrix.buildtool != 'distcheck' && matrix.sockaddr == 'native-sockaddr'
      run: |
        [ -n "$NGTCP2_BUILD_DIR" ] && cd "$NGTCP2_BUILD_DIR"
        "$NGTCP2_SOURCE_DIR"/ci/gen-certificate.sh

        CLIENTS="client gtlsclient bsslclient wsslclient"
        SERVERS="server gtlsserver bsslserver wsslserver"
        if [ "$HAVE_PICOTLS" = "1" ]; then
          CLIENTS="$CLIENTS ptlsclient"
          SERVERS="$SERVERS ptlsserver"
        fi

        for client in $CLIENTS; do
          for server in $SERVERS; do
            echo "# $client - $server"
            ./examples/$server localhost 4433 cert/server.key cert/server.crt > sv.log 2>&1 &
            SVPID="$!"
            ./examples/$client localhost 4433 https://localhost/ --exit-on-first-stream-close
            kill -INT "$SVPID"
            sleep 5
            if wait "$SVPID"; then
              cat sv.log
            else
              cat sv.log
              exit 1
            fi
          done
        done

  
